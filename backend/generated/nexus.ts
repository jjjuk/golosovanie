/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./../src/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BoolFilter: { // input type
    equals?: boolean | null; // Boolean
    not?: NexusGenInputs['NestedBoolFilter'] | null; // NestedBoolFilter
  }
  EventListRelationFilter: { // input type
    every?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
    none?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
    some?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
  }
  EventNameWhereInput: { // input type
    AND?: NexusGenInputs['EventNameWhereInput'][] | null; // [EventNameWhereInput!]
    events?: NexusGenInputs['EventListRelationFilter'] | null; // EventListRelationFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['EventNameWhereInput'][] | null; // [EventNameWhereInput!]
    OR?: NexusGenInputs['EventNameWhereInput'][] | null; // [EventNameWhereInput!]
  }
  EventNameWhereUniqueInput: { // input type
    name?: string | null; // String
  }
  EventStartTimeWhereInput: { // input type
    AND?: NexusGenInputs['EventStartTimeWhereInput'][] | null; // [EventStartTimeWhereInput!]
    events?: NexusGenInputs['EventListRelationFilter'] | null; // EventListRelationFilter
    NOT?: NexusGenInputs['EventStartTimeWhereInput'][] | null; // [EventStartTimeWhereInput!]
    OR?: NexusGenInputs['EventStartTimeWhereInput'][] | null; // [EventStartTimeWhereInput!]
    startTime?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  EventWhereInput: { // input type
    AND?: NexusGenInputs['EventWhereInput'][] | null; // [EventWhereInput!]
    approved?: NexusGenInputs['BoolFilter'] | null; // BoolFilter
    eventName?: NexusGenInputs['EventNameWhereInput'] | null; // EventNameWhereInput
    eventStartTime?: NexusGenInputs['EventStartTimeWhereInput'] | null; // EventStartTimeWhereInput
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['EventWhereInput'][] | null; // [EventWhereInput!]
    OR?: NexusGenInputs['EventWhereInput'][] | null; // [EventWhereInput!]
    paticipants?: NexusGenInputs['ParticipantListRelationFilter'] | null; // ParticipantListRelationFilter
    poll?: NexusGenInputs['PollWhereInput'] | null; // PollWhereInput
    Poll?: NexusGenInputs['PollListRelationFilter'] | null; // PollListRelationFilter
    pollId?: NexusGenInputs['IntFilter'] | null; // IntFilter
    startTime?: NexusGenInputs['StringFilter'] | null; // StringFilter
    votes?: NexusGenInputs['VoteListRelationFilter'] | null; // VoteListRelationFilter
  }
  EventWhereUniqueInput: { // input type
    id?: number | null; // Int
    unique_event?: NexusGenInputs['Unique_eventCompoundUniqueInput'] | null; // Unique_eventCompoundUniqueInput
  }
  FeedListRelationFilter: { // input type
    every?: NexusGenInputs['FeedWhereInput'] | null; // FeedWhereInput
    none?: NexusGenInputs['FeedWhereInput'] | null; // FeedWhereInput
    some?: NexusGenInputs['FeedWhereInput'] | null; // FeedWhereInput
  }
  FeedOrderByInput: { // input type
    action?: NexusGenEnums['SortOrder'] | null; // SortOrder
    id?: NexusGenEnums['SortOrder'] | null; // SortOrder
    time?: NexusGenEnums['SortOrder'] | null; // SortOrder
    userId?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  FeedWhereInput: { // input type
    action?: NexusGenInputs['StringNullableFilter'] | null; // StringNullableFilter
    AND?: NexusGenInputs['FeedWhereInput'][] | null; // [FeedWhereInput!]
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['FeedWhereInput'][] | null; // [FeedWhereInput!]
    OR?: NexusGenInputs['FeedWhereInput'][] | null; // [FeedWhereInput!]
    time?: NexusGenInputs['StringNullableFilter'] | null; // StringNullableFilter
    user?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    userId?: NexusGenInputs['IntNullableFilter'] | null; // IntNullableFilter
  }
  FeedWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  IntNullableFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntNullableFilter'] | null; // NestedIntNullableFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedBoolFilter: { // input type
    equals?: boolean | null; // Boolean
    not?: NexusGenInputs['NestedBoolFilter'] | null; // NestedBoolFilter
  }
  NestedIntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedIntNullableFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntNullableFilter'] | null; // NestedIntNullableFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  NestedStringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  ParticipantListRelationFilter: { // input type
    every?: NexusGenInputs['ParticipantWhereInput'] | null; // ParticipantWhereInput
    none?: NexusGenInputs['ParticipantWhereInput'] | null; // ParticipantWhereInput
    some?: NexusGenInputs['ParticipantWhereInput'] | null; // ParticipantWhereInput
  }
  ParticipantWhereInput: { // input type
    AND?: NexusGenInputs['ParticipantWhereInput'][] | null; // [ParticipantWhereInput!]
    event?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
    eventId?: NexusGenInputs['IntFilter'] | null; // IntFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['ParticipantWhereInput'][] | null; // [ParticipantWhereInput!]
    OR?: NexusGenInputs['ParticipantWhereInput'][] | null; // [ParticipantWhereInput!]
    user?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    userId?: NexusGenInputs['IntFilter'] | null; // IntFilter
  }
  ParticipantWhereUniqueInput: { // input type
    id?: number | null; // Int
    unique_participant?: NexusGenInputs['Unique_participantCompoundUniqueInput'] | null; // Unique_participantCompoundUniqueInput
  }
  PollListRelationFilter: { // input type
    every?: NexusGenInputs['PollWhereInput'] | null; // PollWhereInput
    none?: NexusGenInputs['PollWhereInput'] | null; // PollWhereInput
    some?: NexusGenInputs['PollWhereInput'] | null; // PollWhereInput
  }
  PollWhereInput: { // input type
    active?: NexusGenInputs['BoolFilter'] | null; // BoolFilter
    AND?: NexusGenInputs['PollWhereInput'][] | null; // [PollWhereInput!]
    createdAt?: NexusGenInputs['StringFilter'] | null; // StringFilter
    currentStage?: NexusGenInputs['IntFilter'] | null; // IntFilter
    events?: NexusGenInputs['EventListRelationFilter'] | null; // EventListRelationFilter
    firstStageTime?: NexusGenInputs['StringFilter'] | null; // StringFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['PollWhereInput'][] | null; // [PollWhereInput!]
    OR?: NexusGenInputs['PollWhereInput'][] | null; // [PollWhereInput!]
    secondStageTime?: NexusGenInputs['StringFilter'] | null; // StringFilter
    user?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    userId?: NexusGenInputs['IntFilter'] | null; // IntFilter
    votes?: NexusGenInputs['VoteListRelationFilter'] | null; // VoteListRelationFilter
    winnerEvent?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
    winnerEventId?: NexusGenInputs['IntNullableFilter'] | null; // IntNullableFilter
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    mode?: NexusGenEnums['QueryMode'] | null; // QueryMode
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  StringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    mode?: NexusGenEnums['QueryMode'] | null; // QueryMode
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  Unique_eventCompoundUniqueInput: { // input type
    name: string; // String!
    pollId: number; // Int!
    startTime: string; // String!
  }
  Unique_participantCompoundUniqueInput: { // input type
    eventId: number; // Int!
    userId: number; // Int!
  }
  Unique_voteCompoundUniqueInput: { // input type
    pollId: number; // Int!
    userId: number; // Int!
  }
  UserWhereInput: { // input type
    AND?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    events?: NexusGenInputs['ParticipantListRelationFilter'] | null; // ParticipantListRelationFilter
    Feed?: NexusGenInputs['FeedListRelationFilter'] | null; // FeedListRelationFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    OR?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    password?: NexusGenInputs['StringFilter'] | null; // StringFilter
    Poll?: NexusGenInputs['PollListRelationFilter'] | null; // PollListRelationFilter
    Vote?: NexusGenInputs['VoteListRelationFilter'] | null; // VoteListRelationFilter
  }
  VoteListRelationFilter: { // input type
    every?: NexusGenInputs['VoteWhereInput'] | null; // VoteWhereInput
    none?: NexusGenInputs['VoteWhereInput'] | null; // VoteWhereInput
    some?: NexusGenInputs['VoteWhereInput'] | null; // VoteWhereInput
  }
  VoteWhereInput: { // input type
    AND?: NexusGenInputs['VoteWhereInput'][] | null; // [VoteWhereInput!]
    createdAt?: NexusGenInputs['StringFilter'] | null; // StringFilter
    event?: NexusGenInputs['EventWhereInput'] | null; // EventWhereInput
    eventId?: NexusGenInputs['IntFilter'] | null; // IntFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    NOT?: NexusGenInputs['VoteWhereInput'][] | null; // [VoteWhereInput!]
    OR?: NexusGenInputs['VoteWhereInput'][] | null; // [VoteWhereInput!]
    poll?: NexusGenInputs['PollWhereInput'] | null; // PollWhereInput
    pollId?: NexusGenInputs['IntFilter'] | null; // IntFilter
    user?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    userId?: NexusGenInputs['IntFilter'] | null; // IntFilter
  }
  VoteWhereUniqueInput: { // input type
    id?: number | null; // Int
    unique_vote?: NexusGenInputs['Unique_voteCompoundUniqueInput'] | null; // Unique_voteCompoundUniqueInput
  }
}

export interface NexusGenEnums {
  QueryMode: "default" | "insensitive"
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Event: { // root type
    approved: boolean; // Boolean!
    id: number; // Int!
    name: string; // String!
    pollId: number; // Int!
    startTime: string; // String!
  }
  EventName: { // root type
    name: string; // String!
  }
  EventStartTime: { // root type
    startTime: string; // String!
  }
  Feed: { // root type
    action?: string | null; // String
    id: number; // Int!
    time?: string | null; // String
    userId?: number | null; // Int
  }
  Mutation: {};
  Participant: { // root type
    eventId: number; // Int!
    id: number; // Int!
    userId: number; // Int!
  }
  Poll: { // root type
    active: boolean; // Boolean!
    createdAt: string; // String!
    currentStage: number; // Int!
    firstStageTime: string; // String!
    id: number; // Int!
    secondStageTime: string; // String!
    userId: number; // Int!
    winnerEventId?: number | null; // Int
  }
  Query: {};
  Subscription: {};
  User: { // root type
    id: number; // Int!
    name: string; // String!
    password: string; // String!
  }
  Vote: { // root type
    createdAt: string; // String!
    eventId: number; // Int!
    id: number; // Int!
    pollId: number; // Int!
    userId: number; // Int!
  }
  VotesByEventNameAndTime: { // root type
    name?: string | null; // String
    times?: Array<NexusGenRootTypes['VotesByTime'] | null> | null; // [VotesByTime]
    votes?: number | null; // Int
  }
  VotesByTime: { // root type
    time?: string | null; // String
    votes?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Event: { // field return type
    approved: boolean; // Boolean!
    id: number; // Int!
    iParticipate: boolean | null; // Boolean
    name: string; // String!
    paticipants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    poll: NexusGenRootTypes['Poll']; // Poll!
    pollId: number; // Int!
    startTime: string; // String!
    votes: NexusGenRootTypes['Vote'][]; // [Vote!]!
    votesCount: number | null; // Int
  }
  EventName: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    name: string; // String!
  }
  EventStartTime: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    startTime: string; // String!
  }
  Feed: { // field return type
    action: string | null; // String
    feedLength: number | null; // Int
    id: number; // Int!
    time: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
  }
  Mutation: { // field return type
    cancelPoll: NexusGenRootTypes['Poll'] | null; // Poll
    createPoll: NexusGenRootTypes['Poll'] | null; // Poll
    createVote: NexusGenRootTypes['Vote'] | null; // Vote
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    participate: NexusGenRootTypes['Participant'] | null; // Participant
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Participant: { // field return type
    event: NexusGenRootTypes['Event']; // Event!
    eventId: number; // Int!
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  Poll: { // field return type
    active: boolean; // Boolean!
    createdAt: string; // String!
    currentStage: number; // Int!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    firstStageTime: string; // String!
    id: number; // Int!
    iveVoted: boolean | null; // Boolean
    secondStageTime: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
    votes: NexusGenRootTypes['Vote'][]; // [Vote!]!
    votesByEventNameAndTime: Array<NexusGenRootTypes['VotesByEventNameAndTime'] | null> | null; // [VotesByEventNameAndTime]
    votesCount: number | null; // Int
    winnerEvent: NexusGenRootTypes['Event'] | null; // Event
    winnerEventId: number | null; // Int
  }
  Query: { // field return type
    currentPoll: NexusGenRootTypes['Poll'] | null; // Poll
    eventNames: NexusGenRootTypes['EventName'][]; // [EventName!]!
    feed: NexusGenRootTypes['Feed'][]; // [Feed!]!
    feedLength: number | null; // Int
    me: NexusGenRootTypes['User'] | null; // User
  }
  Subscription: { // field return type
    currentPoll: NexusGenRootTypes['Poll'] | null; // Poll
    feed: NexusGenRootTypes['Feed'] | null; // Feed
    newVotes: number | null; // Int
  }
  User: { // field return type
    id: number; // Int!
    name: string; // String!
    password: string; // String!
  }
  Vote: { // field return type
    createdAt: string; // String!
    event: NexusGenRootTypes['Event']; // Event!
    eventId: number; // Int!
    id: number; // Int!
    poll: NexusGenRootTypes['Poll']; // Poll!
    pollId: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  VotesByEventNameAndTime: { // field return type
    name: string | null; // String
    times: Array<NexusGenRootTypes['VotesByTime'] | null> | null; // [VotesByTime]
    votes: number | null; // Int
  }
  VotesByTime: { // field return type
    time: string | null; // String
    votes: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Event: { // field return type name
    approved: 'Boolean'
    id: 'Int'
    iParticipate: 'Boolean'
    name: 'String'
    paticipants: 'Participant'
    poll: 'Poll'
    pollId: 'Int'
    startTime: 'String'
    votes: 'Vote'
    votesCount: 'Int'
  }
  EventName: { // field return type name
    events: 'Event'
    name: 'String'
  }
  EventStartTime: { // field return type name
    events: 'Event'
    startTime: 'String'
  }
  Feed: { // field return type name
    action: 'String'
    feedLength: 'Int'
    id: 'Int'
    time: 'String'
    user: 'User'
    userId: 'Int'
  }
  Mutation: { // field return type name
    cancelPoll: 'Poll'
    createPoll: 'Poll'
    createVote: 'Vote'
    login: 'AuthPayload'
    participate: 'Participant'
    signup: 'AuthPayload'
  }
  Participant: { // field return type name
    event: 'Event'
    eventId: 'Int'
    id: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Poll: { // field return type name
    active: 'Boolean'
    createdAt: 'String'
    currentStage: 'Int'
    events: 'Event'
    firstStageTime: 'String'
    id: 'Int'
    iveVoted: 'Boolean'
    secondStageTime: 'String'
    user: 'User'
    userId: 'Int'
    votes: 'Vote'
    votesByEventNameAndTime: 'VotesByEventNameAndTime'
    votesCount: 'Int'
    winnerEvent: 'Event'
    winnerEventId: 'Int'
  }
  Query: { // field return type name
    currentPoll: 'Poll'
    eventNames: 'EventName'
    feed: 'Feed'
    feedLength: 'Int'
    me: 'User'
  }
  Subscription: { // field return type name
    currentPoll: 'Poll'
    feed: 'Feed'
    newVotes: 'Int'
  }
  User: { // field return type name
    id: 'Int'
    name: 'String'
    password: 'String'
  }
  Vote: { // field return type name
    createdAt: 'String'
    event: 'Event'
    eventId: 'Int'
    id: 'Int'
    poll: 'Poll'
    pollId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  VotesByEventNameAndTime: { // field return type name
    name: 'String'
    times: 'VotesByTime'
    votes: 'Int'
  }
  VotesByTime: { // field return type name
    time: 'String'
    votes: 'Int'
  }
}

export interface NexusGenArgTypes {
  Event: {
    iParticipate: { // args
      id: number; // Int!
    }
    paticipants: { // args
      after?: NexusGenInputs['ParticipantWhereUniqueInput'] | null; // ParticipantWhereUniqueInput
      before?: NexusGenInputs['ParticipantWhereUniqueInput'] | null; // ParticipantWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    votes: { // args
      after?: NexusGenInputs['VoteWhereUniqueInput'] | null; // VoteWhereUniqueInput
      before?: NexusGenInputs['VoteWhereUniqueInput'] | null; // VoteWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  EventName: {
    events: { // args
      after?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      before?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  EventStartTime: {
    events: { // args
      after?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      before?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    createPoll: { // args
      firstStageTime: string; // String!
      secondStageTime: string; // String!
    }
    createVote: { // args
      name: string; // String!
      pollId: number; // Int!
      startTime: string; // String!
    }
    login: { // args
      name: string; // String!
      password: string; // String!
    }
    participate: { // args
      eventId: number; // Int!
    }
    signup: { // args
      name: string; // String!
      password: string; // String!
    }
  }
  Poll: {
    events: { // args
      after?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      before?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    iveVoted: { // args
      id: number; // Int!
    }
    votes: { // args
      after?: NexusGenInputs['VoteWhereUniqueInput'] | null; // VoteWhereUniqueInput
      before?: NexusGenInputs['VoteWhereUniqueInput'] | null; // VoteWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    eventNames: { // args
      after?: NexusGenInputs['EventNameWhereUniqueInput'] | null; // EventNameWhereUniqueInput
      before?: NexusGenInputs['EventNameWhereUniqueInput'] | null; // EventNameWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      where?: NexusGenInputs['EventNameWhereInput'] | null; // EventNameWhereInput
    }
    feed: { // args
      after?: NexusGenInputs['FeedWhereUniqueInput'] | null; // FeedWhereUniqueInput
      before?: NexusGenInputs['FeedWhereUniqueInput'] | null; // FeedWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['FeedOrderByInput'][] | null; // [FeedOrderByInput!]
    }
  }
  Subscription: {
    newVotes: { // args
      pollId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}