// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @default(autoincrement()) @id
  name String @unique
  password String
  events Participant[]
}

model Poll {
  id Int @default(autoincrement()) @id
  createdAt String
  currentStage Int @default(1)
  active Boolean @default(true)
  userId Int
  user User @relation(fields: [userId], references: [id])
  firstStageTime String
  secondStageTime String
  winnerEventId Int?
  winnerEvent Event? @relation(fields: [winnerEventId], references: [id], name: "winnerEvent")
  votes Vote[]
  events Event[]
}

model EventName{
  name String @unique 
  events Event[]
}

model EventStartTime {
  startTime String @unique 
  events Event[]
}

model Event {
  id Int @default(autoincrement()) @id
  name String
  eventName EventName @relation(fields: [name], references: [name])
  startTime String
  eventStartTime EventStartTime @relation(fields: [startTime], references: [startTime])
  pollId Int
  poll Poll @relation(fields: [pollId], references: [id])
  approved Boolean @default(false)
  paticipants Participant[]
  votes Vote[]

  @@unique([name, startTime, pollId], name: "unique_event")
}

model Vote {
  id Int @default(autoincrement()) @id
  createdAt String
  pollId Int
  poll Poll @relation(fields: [pollId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
  eventId Int
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, pollId], name: "unique_vote")
}

model Participant {
  id Int @default(autoincrement()) @id
  userId Int
  user User @relation(fields: [userId], references: [id])
  eventId Int
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId], name: "unique_participant")
}

model Feed {
  id Int @default(autoincrement()) @id
  userId Int?
  user User? @relation(fields: [userId], references: [id])
  action String?
  time String?
}